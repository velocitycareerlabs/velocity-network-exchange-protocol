{
  "openapi": "3.0.0",
  "x-stoplight": {
    "id": "f0bba51ab2461"
  },
  "info": {
    "title": "VNF Agent Credential Holder API",
    "version": "2.0",
    "description": "Holder API for getting and sharing verified credentials including their identity",
    "contact": {
      "name": "Andres Olave",
      "email": "andres.olave@velocitycareerlabs.com"
    }
  },
  "servers": [
    {
      "url": "https://stagingagent.velocitycareerlabs.io/v0.6/holder-api",
      "description": "Holder Reference API"
    }
  ],
  "paths": {
    "/org/{organizationDID}/inspect/get-presentation-request": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "organizationDID",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get a presentation request JWT",
        "tags": [
          "presentation-exchange"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "presentation_request": {
                      "type": "string",
                      "description": "a jwt signed by the inspector. See presentation_definition for the schema of the payload."
                    }
                  },
                  "required": [
                    "presentation_request"
                  ]
                }
              }
            }
          }
        },
        "operationId": "get-org-organizationDID-inspect-get-presentation-request",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "id",
            "description": "the presentation request id (also the disclosure id)"
          }
        ],
        "description": "Gets a JWT encoded presentation definition. See presentation-definition https://identity.foundation/presentation-exchange/#presentation-definition ",
        "x-stoplight": {
          "id": "312tglw0ry5uv"
        }
      }
    },
    "/org/{organizationDID}/inspect/submit-presentation": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "organizationDID",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Submit a presentation using Presenation Exchange",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "exchange": {
                      "$ref": "./models/exchange-progress.json"
                    },
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "202": {
            "description": "Accepted"
          }
        },
        "operationId": "post-inspect-submit-presentation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "exchange_id": {
                    "type": "string"
                  },
                  "jwt_vp": {
                    "type": "string"
                  },
                  "push_delegate": {
                    "$ref": "../common/models/push-delegate.v1.json"
                  },
                  "vp": {
                    "type": "object",
                    "description": "====DO NOT SEND====",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "issued": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "vendorOriginContext": {
                        "type": "string"
                      },
                      "presentation_submission": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "definition_id": {
                            "type": "string"
                          },
                          "locale": {
                            "type": "string"
                          },
                          "descriptor_map": {
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "path": {
                                  "type": "string"
                                },
                                "path_nested": {
                                  "type": "string"
                                },
                                "format": {
                                  "type": "string",
                                  "enum": [
                                    "jwt",
                                    "jwt_vc",
                                    "jwt_vp",
                                    "ldp",
                                    "ldp_vc",
                                    "ldp_vp"
                                  ]
                                }
                              },
                              "required": [
                                "id",
                                "path",
                                "format"
                              ]
                            }
                          }
                        },
                        "required": [
                          "descriptor_map"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "issued"
                    ]
                  }
                },
                "required": [
                  "exchange_id",
                  "jwt_vp"
                ]
              }
            }
          }
        },
        "description": "Submit a presentation using Presenation Exchange",
        "tags": [
          "presentation-exchange"
        ],
        "x-stoplight": {
          "id": "y9i6ccwruse79"
        },
        "security": [
          {},
          {
            "SessionToken": []
          }
        ]
      }
    },
    "/org/{organizationDID}/issue/get-credential-manifest": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "organizationDID",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get a credential manifest JWT",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "issuing_request": {
                      "type": "string",
                      "description": "a jwt signed by the issuer. See credential_manifest for the schema of the payload."
                    }
                  },
                  "required": [
                    "issuing_request"
                  ]
                }
              }
            }
          }
        },
        "operationId": "get-org-organizationDID-issue-get-credential-manifest",
        "description": "Gets a JWT encoded issuing-request. See credential-manifest https://identity.foundation/credential-manifest/#resource-definition & presentation-definition https://identity.foundation/presentation-exchange/#presentation-definition",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "credential_types",
            "description": "the credential types that the holder wants the credential manifests for"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "exchange_id",
            "description": "the exchange id to use for this credential manifest"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "push_delegate.push_token",
            "description": "the push token for this transaction",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "push_delegate.push_url",
            "description": "the push url to the holderapp provider",
            "required": true
          },
          {
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "name": "refresh",
            "description": "true when this a refresh rather than new credentials"
          }
        ],
        "tags": [
          "issuing"
        ],
        "x-stoplight": {
          "id": "6to7u4ebemi45"
        }
      }
    },
    "/org/{organizationDID}/issue/submit-idenitification": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "organizationDID",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Submit identification using Presenation Exchange",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "exchange": {
                      "$ref": "./models/exchange-progress.json"
                    },
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "operationId": "post-issue-submit-identificaiton",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "exchange_id": {
                    "type": "string"
                  },
                  "jwt_vp": {
                    "type": "string"
                  },
                  "push_delegate": {
                    "$ref": "../common/models/push-delegate.v1.json"
                  },
                  "vp": {
                    "type": "object",
                    "description": "====DO NOT SEND====",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "issued": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "vendorOriginContext": {
                        "type": "string"
                      },
                      "presentation_submission": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "definition_id": {
                            "type": "string"
                          },
                          "locale": {
                            "type": "string"
                          },
                          "descriptor_map": {
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "path": {
                                  "type": "string"
                                },
                                "path_nested": {
                                  "type": "string"
                                },
                                "format": {
                                  "type": "string",
                                  "enum": [
                                    "jwt",
                                    "jwt_vc",
                                    "jwt_vp",
                                    "ldp",
                                    "ldp_vc",
                                    "ldp_vp"
                                  ]
                                }
                              },
                              "required": [
                                "id",
                                "path",
                                "format"
                              ]
                            }
                          }
                        },
                        "required": [
                          "descriptor_map"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "issued"
                    ]
                  }
                },
                "required": [
                  "exchange_id",
                  "jwt_vp"
                ]
              }
            }
          }
        },
        "description": "Submit a identification using Presenation Exchange.\n\nThe body and response is exactly the same as submit-presentation",
        "tags": [
          "issuing"
        ],
        "x-stoplight": {
          "id": "9mwif4h27rckn"
        }
      }
    },
    "/org/{organizationDID}/issue/credential-offers": {
      "post": {
        "summary": "Generates the credential offers",
        "operationId": "generate-credential-offers",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "./models/offer.v1.json"
                  }
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": [
                        "Immediate",
                        "NotImmediate"
                      ]
                    },
                    "maxAgeDuration": {
                      "type": "string",
                      "description": "duration in iso 8601 format. that can be used to notify the user and the agent the maximum amount time to wait for a reply",
                      "example": "P3D",
                      "pattern": "^P(?=\\d+[YMWD])(\\d+Y)?(\\d+M)?(\\d+W)?(\\d+D)?(T(?=\\d+[HMS])(\\d+H)?(\\d+M)?(\\d+S)?)?$"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "description": "timestamp from which the maxAge applies"
                    }
                  },
                  "required": [
                    "kind"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "properties": {
                  "types": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "exchangeId": {
                    "type": "string",
                    "description": "exchangeId is unique for this issuing attempt"
                  },
                  "existingCredentialsHashes": {
                    "type": "array",
                    "description": "A collection of hashes of the existing credentials received restricted to the values in credentialSubject + expirationDate",
                    "items": {
                      "type": "object",
                      "properties": {
                        "alg": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "required": [
                  "exchangeId"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "types": [
                      "https://velocitycareerlabs.com/schemas/CurrentEmploymentPosition",
                      "https://velocitycareerlabs.com/schemas/EducationDegree"
                    ],
                    "exchangeId": "f312ea213215498123"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "SessionToken": []
          }
        ],
        "tags": [
          "issuing"
        ],
        "description": "Generates the offers of the specified types for this person. If no types are specified then offers of all supported types should be generated",
        "x-stoplight": {
          "id": "cz1jt67ogtfrz"
        }
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "organizationDID",
          "in": "path",
          "required": true,
          "description": "the did of the organization that has been provisioined on the agent"
        }
      ]
    },
    "/org/{organizationDID}/issue/finalize-offers": {
      "post": {
        "summary": "Finalize offers",
        "operationId": "finalize-offers",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "An array of JWTs of the accepted offers. Each JWT use JWS to encode the credential: https://stoplight.io/p/docs/gh/sloops77/vcl-poc-apis/reference/holder/models/credential.v1.json?group=master",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "approvedOfferIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The list of approved offer ids"
                  },
                  "rejectedOfferIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The list of rejected offer ids"
                  },
                  "exchangeId": {
                    "type": "string",
                    "description": "exchangeId is unique for this issuing attempt"
                  }
                },
                "required": [
                  "exchangeId"
                ],
                "additionalProperties": true
              }
            }
          },
          "description": "Send an array of offerIds"
        },
        "security": [
          {
            "SessionToken": []
          }
        ],
        "description": "Generates verifiable credentials for the approved offers. The credentials are returned as an array of jwts that match the credential schema. Explicitly rejected offers may also be sent. Maybe called multiple times for the same exchange. Any offers not received means that the exchange will stay open.\n\nSpec: https://www.w3.org/TR/vc-data-model/#json-web-token - options of how to encode & decode a verifiable credential as a JWT. \n\nImplementation: https://github.com/decentralized-identity/did-jwt-vc",
        "tags": [
          "issuing"
        ],
        "x-stoplight": {
          "id": "i9tgl94xjliwy"
        }
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "organizationDID",
          "in": "path",
          "required": true,
          "description": "the did of the organization that has been provisioined on the agent"
        }
      ]
    },
    "/org/{organizationDID}/get-exchange-progress": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "organizationDID",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get exchange progress",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "exchange": {
                      "$ref": "./models/exchange-progress.json"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-org-organizationDID-inspect-get-presentation-progress",
        "description": "Get the progress of the exchange",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "exchange_id",
            "description": "the exchange id",
            "required": true
          }
        ],
        "tags": [
          "common"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "x-stoplight": {
          "id": "v5nv0pmi8db81"
        }
      }
    },
    "/org/{organizationDID}/app-redirect": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "organizationDID",
          "in": "path",
          "required": true,
          "description": "organization's DID"
        }
      ],
      "get": {
        "summary": "App redirection service",
        "tags": [
          "common"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "operationId": "get-org-organizationDID-deep-link",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "inspect",
                "issue"
              ]
            },
            "in": "query",
            "name": "exchange_type",
            "description": "issue or inspect. is the \"host\" seciton of the url",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "request_uri",
            "description": "url encoded url for the request_uri"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "inspectorDid",
            "description": "did of the organization doing inspection"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "vendorOriginContext",
            "description": "vendor's origin context token"
          }
        ],
        "description": "Redirection service for app landing"
      }
    },
    "/oauth/token": {
      "post": {
        "summary": "OAuth Token creation",
        "operationId": "post-oauth-token",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string",
                      "description": "jwt of the access_token"
                    },
                    "refresh_token": {
                      "type": "string",
                      "description": "opaque token"
                    },
                    "token_type": {
                      "type": "string",
                      "description": "Hardcoded to Bearer",
                      "enum": [
                        "Bearer"
                      ]
                    }
                  },
                  "required": [
                    "access_token",
                    "token_type"
                  ]
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "access_token": "eyJz93a...k4laUWw",
                      "refresh_token": "DSei18d....rErO21op",
                      "token_type": "Bearer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/models/error.v1.yaml"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "grant_type": {
                    "type": "string"
                  },
                  "authorization_code": {
                    "type": "string",
                    "description": "authoirzation code"
                  },
                  "refresh_token": {
                    "type": "string",
                    "description": "refresh token"
                  },
                  "audience": {
                    "type": "string",
                    "description": "audience the `access_token` is for"
                  },
                  "client_id": {
                    "type": "string",
                    "description": "DID of the holder app"
                  }
                },
                "required": [
                  "grant_type",
                  "audience",
                  "client_id"
                ]
              },
              "examples": {
                "Presentation Token Example": {
                  "value": {
                    "grant_type": "authorization_code",
                    "authorization_code": "Xxfd6hEP98",
                    "audience": "https://careerwalletap.velocitycareerlabs.io",
                    "client_id": "did:web:example.com"
                  }
                },
                "Refresh Token Example": {
                  "value": {
                    "grant_type": "refresh_token",
                    "refresh_token": "DSei18d....rErO21op",
                    "audience": "https://careerwalletap.velocitycareerlabs.io",
                    "client_id": "did:web:example.com"
                  }
                }
              }
            }
          },
          "description": ""
        },
        "description": "Oauth token creation for access and refresh tokens",
        "tags": [
          "common"
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "SessionToken": {
        "type": "http",
        "scheme": "Bearer"
      }
    },
    "schemas": {}
  },
  "tags": [
    {
      "name": "channels"
    }
  ]
}